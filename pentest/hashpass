#!/usr/bin/env python3

import argparse
import hashlib
import logging
import requests

logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')

def fetch_password_list(url):
    """Fetch the password list from the specified URL."""
    response = requests.get(url)
    if response.status_code == 200:
        return response.text.splitlines()
    else:
        logging.error(f"Failed to fetch the password list. Error: {response.status_code}")
        return []

def crack_hash(url, username, hash_value, password_list_url):
    """Crack the given hash using a password library."""
    password_list = fetch_password_list(password_list_url)
    for password in password_list:
        hashed_password = hashlib.sha256(password.encode()).hexdigest()
        if hashed_password == hash_value:
            logging.info(f"Success! Password found: {password}")
            return 'success'
        else:
            logging.info(f"Attempting password: {password}")
    
    return 'failed'

def main():
    parser = argparse.ArgumentParser(description="Hash cracking simulation.")
    parser.add_argument("--url", required=True, help="Login URL")
    parser.add_argument("--user", required=True, help="Username for login")
    parser.add_argument("--hash", required=True, help="Hash value to crack")
    parser.add_argument("--password-list-url", required=True, help="URL of the password list")
    args = parser.parse_args()

    try:
        result = crack_hash(args.url, args.user, args.hash, args.password_list_url)
        if result == 'failed':
            logging.warning("Failed to crack the hash with the password library.")
    except Exception as e:
        logging.error(f"Script failed due to an error: {e}")

if __name__ == "__main__":
    main()


